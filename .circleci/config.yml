version: 2.1
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk
        environment:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: postgres
          DB_USER: user
          DB_PASS: password

      - image: circleci/postgres:9.6.2-alpine
        environment:
          POSTGRES_USER: user
          POSTGRES_DB: password

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m -Dspring.datasource.url=jdbc:postgres://user:password@localhost:5432/postgres -Dspring.datasource.jdbcUrl=jdbc:postgres://user:password@localhost:5432/postgres -Dspring.datasource.username=user  -Dspring.datasource.password=password 

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - run: mvn integration-test
      - run: ls -l        
      - persist_to_workspace:
          root: target
          paths:
            - .
  deploy_to_staging:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: target
      - run: ls -l
      - run: 
          name: Setup Google Cloud SDK
          command: |
            apt-get install -qq -y gettext
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
      - setup_remote_docker
      - run: 
          name: Docker build and push
          command: |
            docker build \
              --build-arg COMMIT_REF=${CIRCLE_SHA1} \
              --build-arg BUILD_DATE=`date -u +”%Y-%m-%dT%H:%M:%SZ”` \
              -t ${CIRCLE_PROJECT_REPONAME} .
            docker tag ${CIRCLE_PROJECT_REPONAME} gcr.io/${GOOGLE_PROJECT_ID}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io
            docker push gcr.io/${GOOGLE_PROJECT_ID}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}
      - run: pwd
      - run: 
          name: Deploy to Kubernetes
          command: |
            envsubst < ${HOME}/project/deploy/k8s.yml > ${HOME}/patched_k8s.yml
            kubectl apply -f ${HOME}/patched_k8s.yml
            kubectl rollout status deployment/${SERVICE_NAME}
workflows:
  version: 2
  build:
    jobs:
      - build
      - deploy_to_staging:
          requires:
            - build
          filters:
            branches:
              only: develop